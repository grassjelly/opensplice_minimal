//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: HelloWorldDcps.cpp
//  Source: gen/HelloWorldDcps.idl
//  Generated: Tue Oct 24 19:38:45 2017
//  OpenSplice 6.7.170912OSS
//  
//******************************************************************

#include "HelloWorldDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < HelloWorld::Msg, struct MsgSeq_uniq_>;
#endif

const char * HelloWorld::MsgTypeSupportInterface::_local_id = "IDL:HelloWorld/MsgTypeSupportInterface:1.0";

HelloWorld::MsgTypeSupportInterface_ptr HelloWorld::MsgTypeSupportInterface::_duplicate (HelloWorld::MsgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean HelloWorld::MsgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, HelloWorld::MsgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

HelloWorld::MsgTypeSupportInterface_ptr HelloWorld::MsgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   HelloWorld::MsgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (HelloWorld::MsgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < HelloWorld::MsgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

HelloWorld::MsgTypeSupportInterface_ptr HelloWorld::MsgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   HelloWorld::MsgTypeSupportInterface_ptr result;
   result = dynamic_cast < HelloWorld::MsgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * HelloWorld::MsgDataWriter::_local_id = "IDL:HelloWorld/MsgDataWriter:1.0";

HelloWorld::MsgDataWriter_ptr HelloWorld::MsgDataWriter::_duplicate (HelloWorld::MsgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean HelloWorld::MsgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, HelloWorld::MsgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

HelloWorld::MsgDataWriter_ptr HelloWorld::MsgDataWriter::_narrow (DDS::Object_ptr p)
{
   HelloWorld::MsgDataWriter_ptr result = NULL;
   if (p && p->_is_a (HelloWorld::MsgDataWriter::_local_id))
   {
      result = dynamic_cast < HelloWorld::MsgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

HelloWorld::MsgDataWriter_ptr HelloWorld::MsgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   HelloWorld::MsgDataWriter_ptr result;
   result = dynamic_cast < HelloWorld::MsgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * HelloWorld::MsgDataReader::_local_id = "IDL:HelloWorld/MsgDataReader:1.0";

HelloWorld::MsgDataReader_ptr HelloWorld::MsgDataReader::_duplicate (HelloWorld::MsgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean HelloWorld::MsgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, HelloWorld::MsgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

HelloWorld::MsgDataReader_ptr HelloWorld::MsgDataReader::_narrow (DDS::Object_ptr p)
{
   HelloWorld::MsgDataReader_ptr result = NULL;
   if (p && p->_is_a (HelloWorld::MsgDataReader::_local_id))
   {
      result = dynamic_cast < HelloWorld::MsgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

HelloWorld::MsgDataReader_ptr HelloWorld::MsgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   HelloWorld::MsgDataReader_ptr result;
   result = dynamic_cast < HelloWorld::MsgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * HelloWorld::MsgDataReaderView::_local_id = "IDL:HelloWorld/MsgDataReaderView:1.0";

HelloWorld::MsgDataReaderView_ptr HelloWorld::MsgDataReaderView::_duplicate (HelloWorld::MsgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean HelloWorld::MsgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, HelloWorld::MsgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

HelloWorld::MsgDataReaderView_ptr HelloWorld::MsgDataReaderView::_narrow (DDS::Object_ptr p)
{
   HelloWorld::MsgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (HelloWorld::MsgDataReaderView::_local_id))
   {
      result = dynamic_cast < HelloWorld::MsgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

HelloWorld::MsgDataReaderView_ptr HelloWorld::MsgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   HelloWorld::MsgDataReaderView_ptr result;
   result = dynamic_cast < HelloWorld::MsgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



